#!/bin/bash

TRAINER_IMAGE="soulshake/prepare-vms"

DEPENDENCIES="
    awscli
    ssh
    curl
    jq
    bsdmainutils
    pssh
    python-pip
    man
    wkhtmltopdf
    "

ENVVARS="
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION
    AWS_DEFAULT_PROFILE
    "

# Get the script's real directory, whether we're being called directly or via a symlink
if [ -L $0 ]; then
    export SCRIPT_DIR=$(dirname $(readlink $0))
else
    export SCRIPT_DIR=$(dirname $(readlink -f $0))
fi

run_natively() {
    scripts/trainer-cli "$@"
}

run_containerized() {
    if [ -z $SSH_AUTH_SOCK ]; then
        echo -n "SSH_AUTH_SOCK envvar not set, so its parent directory can't be "
        echo "mounted as a volume in a container."
        echo "Try running the command below and trying again:"
        echo "eval \$(ssh-agent) && ssh-agent && ssh-add"
        exit 1
    fi

    #/tmp/ssh-uN1oMimerRo0/agent.1411
    (
    cd $SCRIPT_DIR
    export SSH_AUTH_DIRNAME=$(dirname $SSH_AUTH_SOCK)
    docker-compose -f docker-compose.yml run prepare-vms "$@"

    #docker run --rm -ti \
    #    --name trainer \
    #    -e AWS_ACCESS_KEY_ID \
    #    -e AWS_CONFIG_FILE \
    #    -e AWS_DEFAULT_PROFILE \
    #    -e AWS_DEFAULT_REGION \
    #    -e AWS_DEFAULT_OUTPUT \
    #    -e AWS_SECRET_ACCESS_KEY \
    #    -e AWS_SESSION_TOKEN \
    #    -e USER \
    #    -e SSH_AUTH_SOCK \
    #    -e SCRIPT_DIR=/trainer-tools \
    #    -e LOCAL_PATH=$SCRIPT_DIR \
    #    -e DISPLAY=$DISPLAY \
    #    -v /tmp/.X11-unix:/tmp/.X11-unix \
    #    -v `pwd`:/workdir \
    #    -v $SCRIPT_DIR:/trainer-tools/ \
    #    -v $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
    #    -w /workdir \
    #    --entrypoint "/trainer-tools/scripts/trainer-cli" \
    #    $TRAINER_IMAGE "$@"
    )
}

check_envvars() {
    # This script expects plain text output from the AWS CLI in some places
    export AWS_DEFAULT_OUTPUT=text

    for envvar in $ENVVARS; do
        if [ -z "${!envvar}" ]; then
            echo "Please export $envvar environment variable. Unsetting."
            unset $envvar
            #return 1
        fi
    done
    return 0
}

show_missing_dependencies() {
    for dependency in $DEPENDENCIES; do
        type $dependency >/dev/null 2>&1 && echo "     $dependency: [OK]" \
            || { echo >&2 "$(tput setaf 1)     $dependency: [NOK] $(tput sgr0)" ;}
    done
}

dependencies_fulfilled() {
    for dependency in $DEPENDENCIES ; do
        type $dependency >/dev/null 2>&1 \
            || return 1 ;
    done

    echo "All dependencies fulfilled. Running locally."
    return 0
}

trainer_image_exists_locally() {
    ret=$(docker inspect $TRAINER_IMAGE >/dev/null 2>&1)
    return $?
}

if ! check_envvars; then
    exit 1
fi

if dependencies_fulfilled; then
    run_natively "$@"
elif trainer_image_exists_locally; then
    run_containerized "$@"
else
    echo "Some dependencies are missing, and docker image $TRAINER_IMAGE doesn't exist locally."
    echo "Please do one of the following: "
    echo "- run \`docker build -t soulshake/prepare-vms .\`"
    echo "- run \`docker pull soulshake/prepare-vms\`"
    echo "- install all dependencies: "
    show_missing_dependencies
fi
